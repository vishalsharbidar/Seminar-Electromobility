%------------------------------------------------------------------------------------------------------------------------------------------------------------
%                                      Rule Based Energy Management Strategy for Parallel Mild Hybrid Vehicle 
%------------------------------------------------------------------------------------------------------------------------------------------------------------
% Controller design for U function
%------------------------------------------------------------------------------------------------------------------------------------------------------------

function u = controller(input)

%------------------------------------------------------------------------------------------------------------------------------------------------------------
% Input and other variable declaration
%------------------------------------------------------------------------------------------------------------------------------------------------------------

w_MGB = input(1);            % get flywheel angular velocity
dw_MGB = input(2);           % get flywheel angular acceleration
T_MGB = input(3);            % get flywheel torque
i = input (4);               % Gear number 
Q_BT = input(5);             % State of charge (SoC)

global w_EM_max;             % define maximum motor angular velocity (global) 
global T_EM_max;             % define maximum motor torque (global)
global Q_BT_IC;              % define initial SoC (global)
theta_EM = 0.1;              % define motor inertia
epsilon = 0.01;              % define epsilon 
u_Mot_max = 0.21;            % define maximum torque-split factor for Motor mode 
u_Gen_max = -0.35;           % define maximum torque-split factor for Generator mode

%------------------------------------------------------------------------------------------------------------------------------------------------------------
% To calculate maximum torque and minimum torque that is generated by electric motor                                                              
%------------------------------------------------------------------------------------------------------------------------------------------------------------

T_EM_maxx = (interp1(w_EM_max,T_EM_max,w_MGB)-abs(theta_EM*dw_MGB)-epsilon);
T_EM_minn = (interp1(w_EM_max,-T_EM_max,w_MGB)+abs(theta_EM*dw_MGB)+epsilon);

%------------------------------------------------------------------------------------------------------------------------------------------------------------
% Main code for selecting modes of operation for better fuel efficiency
%------------------------------------------------------------------------------------------------------------------------------------------------------------

if ((T_MGB > 0) && (T_MGB <=30))
 
    if (T_MGB < T_EM_maxx) && (Q_BT >= (0.15*Q_BT_IC)) 
    u=1;                                                                                          % Electric Driving
    else
     u = max((interp1(w_EM_max,-T_EM_max,w_MGB)+abs(theta_EM*dw_MGB)+epsilon)/T_MGB,u_Gen_max);   % LPS-Generator mode 
    end;  

elseif ((T_MGB>30) && (T_MGB <100))&& (Q_BT <= (Q_BT_IC))                                         % LPS-Generator mode
   u = max((interp1(w_EM_max,-T_EM_max,w_MGB)+abs(theta_EM*dw_MGB)+epsilon)/T_MGB,u_Gen_max);
  
elseif ((T_MGB >= 100) && (Q_BT > (0.15*Q_BT_IC)))                                                % LPS-Motor mode
   u = min((interp1(w_EM_max,T_EM_max,w_MGB)-abs(theta_EM*dw_MGB)-epsilon)/T_MGB,u_Mot_max);
   
elseif ((T_MGB < 0)  && (Q_BT <= (Q_BT_IC)))                                                      % Regeneration 
   u = min((interp1(w_EM_max,-T_EM_max,w_MGB)+abs(theta_EM*dw_MGB)+epsilon)/T_MGB,1);  
   
else                       
  u = 0;                                                                                          % Engine only
 
end;